{"mappings":"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","sources":["scripts/standards.js"],"sourcesContent":["// STANDARDS\r\nfunction makeStateSelect({\r\n    addRecode = false\r\n} = {}) {\r\n    try {\r\n        const editor = window.editor;\r\n        const inputText = getInputOrLine().trim();\r\n\r\n        const match = inputText.match(/^([a-zA-Z0-9-_]+)([.:)\\s])([\\s\\S]*)$/);\r\n        if (!match) {\r\n            alert(\"Input should start with a label and punctuation (e.g. 'Q1. Question...')\");\r\n            return;\r\n        }\r\n\r\n        let label = match[1];\r\n        let title = match[3].trim().replace(/\\n{2,}/g, \"\\n\");\r\n\r\n        if (/^\\d/.test(label))\r\n            label = \"Q\" + label;\r\n\r\n        const choicesXml = US_STATES\r\n            .map(([code, name]) => `  <choice label=\"${code}\">${name}</choice>`)\r\n            .join(\"\\n\");\r\n\r\n        let xml = `<select label=\"${label}\" optional=\"0\">\r\n  <title>${title}</title>\r\n${choicesXml}\r\n</select>\r\n<suspend/>`;\r\n\r\n        if (addRecode) {\r\n            xml += `\r\n\r\n<exec>\r\nif ${label}.choices[${label}.ival].label in [\"ME\", \"NH\", \"VT\", \"MA\", \"RI\", \"CT\", \"NY\", \"NJ\", \"PA\"]:\r\n\\thRegion.val = 0\r\nelif ${label}.choices[${label}.ival].label in [\"WI\", \"IL\", \"MI\", \"IN\", \"OH\", \"ND\", \"SD\", \"NE\", \"KS\", \"MN\", \"IA\", \"MO\"]:\r\n\\thRegion.val = 1\r\nelif ${label}.any and ${label}.choices[${label}.ival].label in [\"KY\", \"TN\", \"MS\", \"AL\", \"FL\", \"GA\", \"SC\", \"NC\", \"VA\", \"WV\", \"DC\", \"MD\", \"DE\", \"TX\", \"OK\", \"AR\", \"LA\"]:\r\n\\thRegion.val = 2\r\nelif ${label}.choices[${label}.ival].label in [\"MT\", \"ID\", \"WY\", \"NV\", \"UT\", \"CO\", \"AZ\", \"NM\", \"WA\", \"OR\", \"CA\", \"AK\", \"HI\"]:\r\n\\thRegion.val = 3\r\n</exec>\r\n\r\n<radio label=\"hRegion\" optional=\"1\" where=\"execute\" sst=\"0\">\r\n  <title>Hidden Question: Region recode</title>\r\n  <row label=\"r1\">Northeast (ME, NH, VT, MA, RI, CT, NY, NJ, PA)</row>\r\n  <row label=\"r2\">Midwest (WI, IL, MI, IN, OH, ND, SD, NE, KS, MN, IA, MO)</row>\r\n  <row label=\"r3\">South (KY, TN, MS, AL, FL, GA, SC, NC, VA, WV, DC, MD, DE, TX, OK, AR, LA)</row>\r\n  <row label=\"r4\">West (MT, ID, WY, NV, UT, CO, AZ, NM, WA, OR, CA, AK, HI)</row>\r\n</radio>\r\n\r\n<suspend/>`;\r\n        }\r\n\r\n        editor.replaceSelection(xml);\r\n    } catch (err) {\r\n        console.error(\"makeStateSelect() failed:\", err);\r\n        alert(\"Error generating select question.\");\r\n    }\r\n}\r\n\r\nfunction makeStateOnly() {\r\n    makeStateSelect({\r\n        addRecode: false\r\n    });\r\n}\r\n\r\nfunction makeStateWithRecode() {\r\n    makeStateSelect({\r\n        addRecode: true\r\n    });\r\n}\r\n\r\nfunction makeStateCheckbox() {\r\n    try {\r\n        const editor = window.editor;\r\n        const inputText = getInputOrLine().trim();\r\n\r\n        const match = inputText.match(/^([a-zA-Z0-9-_]+)([.:)\\s])([\\s\\S]*)$/);\r\n        if (!match) {\r\n            alert(\"Input should start with a label and punctuation (e.g. 'Q1. Select your states...')\");\r\n            return;\r\n        }\r\n\r\n        let label = match[1];\r\n        let title = match[3].trim().replace(/\\n{2,}/g, \"\\n\");\r\n        if (/^\\d/.test(label))\r\n            label = \"Q\" + label;\r\n\r\n        const rows = US_STATES\r\n            .map(([code, name]) => `  <row label=\"${code}\">${name}</row>`)\r\n            .join(\"\\n\");\r\n\r\n        const xml = `<checkbox label=\"${label}\" optional=\"0\">\r\n  <title>${title}</title>\r\n${rows}\r\n</checkbox>\r\n<suspend/>`;\r\n\r\n        editor.replaceSelection(xml);\r\n    } catch (err) {\r\n        console.error(\"makeStateCheckbox() failed:\", err);\r\n        alert(\"Could not generate checkbox state list.\");\r\n    }\r\n}\r\n\r\nfunction makeCountrySelectISO() {\r\n    try {\r\n        const editor = window.editor;\r\n        const inputText = getInputOrLine().trim();\r\n\r\n        const match = inputText.match(/^([a-zA-Z0-9-_]+)([.:)\\s])([\\s\\S]*)$/);\r\n        if (!match) {\r\n            alert(\"Expected format: Label. Question title...\");\r\n            return;\r\n        }\r\n\r\n        let label = match[1];\r\n        let title = match[3].trim().replace(/\\n{2,}/g, \"\\n\");\r\n        if (/^\\d/.test(label))\r\n            label = \"Q\" + label;\r\n\r\n        const choices = COUNTRIES\r\n            .map(([code, name]) => `  <choice label=\"${code}\">${name}</choice>`)\r\n            .join(\"\\n\");\r\n\r\n        const xml = `<select label=\"${label}\" optional=\"0\">\r\n  <title>${title}</title>\r\n${choices}\r\n</select>\r\n<suspend/>`;\r\n\r\n        editor.replaceSelection(xml);\r\n    } catch (err) {\r\n        console.error(\"makeCountrySelectISO() failed:\", err);\r\n        alert(\"Could not generate country dropdown.\");\r\n    }\r\n}\r\n\r\n// Add Survey Copy Protection\r\nfunction addCopyProtection() {\r\n    xmlItems = COPY_PROTECTION;\r\n    window.editor.replaceSelection(xmlItems);\r\n}\r\n\r\nfunction makeUnselectableSpan() {\r\n    const selectedText = getInputOrLine();\r\n    const html = `<span style=\"-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;\" unselectable=\"on\" ondragstart=\"return false\" oncontextmenu=\"return false\">${selectedText.trim()}</span>`;\r\n    window.editor.replaceSelection(html);\r\n}\r\n\r\nfunction makeUnselectableDiv() {\r\n    const selectedText = getInputOrLine();\r\n    const html = `<div style=\"-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;\" unselectable=\"on\" ondragstart=\"return false\" oncontextmenu=\"return false\">${selectedText.trim()}</div>`;\r\n    window.editor.replaceSelection(html);\r\n}\r\n\r\nfunction addUnselectableAttributes() {\r\n    const attrs = ` style=\"-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;\" unselectable=\"on\" ondragstart=\"return false\" oncontextmenu=\"return false\"`;\r\n    window.editor.replaceSelection(attrs);\r\n}\r\n\r\nfunction addMouseoverTemplate() {\r\n    const attrs = `<span class=\"self-tooltip\">(MOUSE OVER TEXT HERE)</span><span class=\"tooltip-content\">(MOUSEOVER CONTENT HERE)</span>`;\r\n    window.editor.replaceSelection(attrs);\r\n}\r\n\r\nfunction addPopupTemplate() {\r\n    const attrs = `<span class=\"self-popup\" onclick=\"Survey.uidialog.make($(this).next('.popup-content'), {width: Math.min(320, $(window).width()), height: Math.min(240, $(window).height()), title: ''} );\">(POP-UP TEXT HERE)</span><div class=\"popup-content\">(POP-UP CONTENT HERE)</div>`;\r\n    window.editor.replaceSelection(attrs);\r\n}\r\n\r\nfunction addvStatusVirtual() {\r\n    window.editor.replaceSelection(VSTATUS)\r\n}\r\n\r\nfunction addvChange() {\r\n    const today = new Date();\r\n    const yyyy = today.getFullYear();\r\n    const mm = String(today.getMonth() + 1).padStart(2, \"0\");\r\n    const dd = String(today.getDate()).padStart(2, \"0\");\r\n    const formattedDate = `${yyyy}-${mm}-${dd}`;\r\n    window.editor.replaceSelection(vChange(formattedDate).trim());\r\n}\r\n\r\nfunction addShuffleRowsVirtual() {\r\n    window.editor.replaceSelection(SHUFFLE_ROWS_VIRTUAL)\r\n}\r\n"],"names":[],"version":3,"file":"survey3.8af98d93.js.map","sourceRoot":"/__parcel_source_root/"}