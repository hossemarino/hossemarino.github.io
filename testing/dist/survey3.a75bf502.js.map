{"mappings":"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","sources":["scripts/questionfunctions.js"],"sourcesContent":["// make radio\r\nfunction makeRadio() {\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    let selectedText = getInputOrLine();\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        //  Convert numbering format (e.g., \"1.2\" → \"1_2\")\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        //  Extract label\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        //  Remove blank lines\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        //  Ensure label starts with \"Q\" if it's numeric\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        //  Capture title\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        //  Remove title from input\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        //  Determine comment based on content\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            console.log(set);\r\n            const is2D = input.includes(\"<row\") && input.includes(\"<col\");\r\n            comment = is2D\r\n                 ? `<comment>${set.radio2d}</comment>\\n`\r\n                 : `<comment>${set.radio}</comment>\\n`;\r\n        }\r\n\r\n        //  Compose final question output\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<radio label=\"${label.trim()}\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</radio>\\n<suspend/>`\r\n             : `<radio label=\"${label.trim()}\">\\n  <title>${title.trim()}</title>\\n  ${comment}  ${input}\\n</radio>\\n<suspend/>`;\r\n\r\n        window.editor.replaceSelection(xmlItems)\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeRadio clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n//make rating\r\nfunction makeRating() {\r\n    let selectedText = getInputOrLine();\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        let input = selectedText.trim();\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        let shuffle = \"\";\r\n        let style = \"\";\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            const is2D = input.includes(\"<row\") && input.includes(\"<col\");\r\n            comment = is2D\r\n                 ? `<comment>${set.radio2d}</comment>\\n`\r\n                 : `<comment>${set.radio}</comment>\\n`;\r\n        }\r\n\r\n        if (input.includes(\"<row\") && input.includes(\"<col\")) {\r\n            let sections = input.split(\"  \");\r\n            sections.forEach(section => {\r\n                if (section.includes(\"value=\")) {\r\n                    shuffle = section.includes(\"<col\") ? ` shuffle=\"rows\"` : ` shuffle=\"cols\"`;\r\n                }\r\n            });\r\n        }\r\n\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<radio label=\"${label.trim()}\"${shuffle}${style} type=\"rating\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</radio>\\n<suspend/>`\r\n             : `<radio label=\"${label.trim()}\"${shuffle}${style} type=\"rating\">\\n  <title>${title.trim()}</title>\\n  ${comment}  ${input}\\n</radio>\\n<suspend/>`;\r\n\r\n        window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeRatingQuestion clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make checkbox\r\nfunction makeCheckbox() {\r\n    let selectedText = getInputOrLine();\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    const shouldRecode = document.getElementById(\"ihut_chckbox_recode\")?.value === \"Yes\";\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        let notaArray = [\">None of the above\", \">None of these\"];\r\n        notaArray.forEach(nota => {\r\n            if (input.includes(nota)) {\r\n                input = input.replace(nota, ` exclusive=\"1\" randomize=\"0\"${nota}`);\r\n            }\r\n        });\r\n\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            comment = `<comment>${set.checkbox}</comment>\\n`;\r\n        }\r\n\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<checkbox label=\"${label.trim()}\" atleast=\"1\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</checkbox>\\n<suspend/>`\r\n             : `<checkbox label=\"${label.trim()}\" atleast=\"1\">\\n  <title>${title.trim()}</title>\\n  ${comment}  ${input}\\n</checkbox>\\n<suspend/>`;\r\n\r\n        if (shouldRecode) {\r\n            const execLabel = label.trim();\r\n            const hiddenTitle = `HIDDEN: record ${label.trim()} answers`;\r\n\r\n            const recodeBlock =`\\n<text label=\"h${execLabel}\" where=\"execute,survey,report\">\r\n  <title>${hiddenTitle}</title>\r\n  <exec>\r\nchkbox_recode(thisQuestion)\r\n  </exec>\r\n</text>\r\n<suspend/>`;\r\n\r\n            xmlItems += `\\n${recodeBlock}`;\r\n        }\r\n        window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n    } catch (error) {\r\n        console.error(\"makeCheckbox clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make Starrating\r\nfunction makeStarrating() {\r\n    let selectedText = getInputOrLine();\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        let xmlItems = `<select label=\"${label.trim()}\"\\n  optional=\"0\"\\n  starrating:star_selected_css=\"color: rgb(107,193,116);\"\\n  uses=\"starrating.5\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</select>\\n<suspend/>`\r\n\r\n            window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n    } catch (error) {\r\n        console.error(\"makeStarrating clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make Select\r\nfunction makeSelect() {\r\n    let selectedText = getInputOrLine();\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        let xmlItems = `<select label=\"${label.trim()}\" optional=\"0\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</select>\\n<suspend/>`\r\n\r\n            window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n    } catch (error) {\r\n        console.error(\"makeSelect clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make Sliderpoints\r\nfunction makeSliderpoints() {\r\n    let selectedText = getInputOrLine();\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        let xmlItems = `<select label=\"${label.trim()}\" \\n  optional=\"0\"\\n  sliderpoints:handle_css=\"background-color: rgb(107,193,116);\"\\n  sliderpoints:legend_selected_css=\"color: rgb(107,193,116);\"\\n  ss:questionClassNames=\"sq-sliderpoints\"\\n  uses=\"sliderpoints.3\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</select>\\n<suspend/>`\r\n\r\n            window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n    } catch (error) {\r\n        console.error(\"makeSliderpoints clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make text\r\nfunction makeText() {\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    let selectedText = getInputOrLine();\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        //  Convert numbering format (e.g., \"1.2\" → \"1_2\")\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        //  Extract label\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        //  Remove blank lines\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        //  Ensure label starts with \"Q\" if it's numeric\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        //  Capture title\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        //  Remove title from input\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        //  Determine comment based on content\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            comment = `<comment>${set.text}</comment>\\n`;\r\n        }\r\n        //  Compose final question output\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<text label=\"${label.trim()}\" size=\"40\" optional=\"0\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</text>\\n<suspend/>`\r\n             : `<text label=\"${label.trim()}\" size=\"40\" optional=\"0\">\\n  <title>${title.trim()}</title>\\n  ${comment}  ${input}\\n</text>\\n<suspend/>`;\r\n\r\n        window.editor.replaceSelection(xmlItems)\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeText clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make textarea\r\nfunction makeTextarea() {\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    let selectedText = getInputOrLine();\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        //  Convert numbering format (e.g., \"1.2\" → \"1_2\")\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        //  Extract label\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        //  Remove blank lines\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        //  Ensure label starts with \"Q\" if it's numeric\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        //  Capture title\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        //  Remove title from input\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        //  Determine comment based on content\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            comment = `<comment>${set.text}</comment>\\n`\r\n        }\r\n        //  Compose final question output\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<textarea label=\"${label.trim()}\" optional=\"0\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</textarea>\\n<suspend/>`\r\n             : `<textarea label=\"${label.trim()}\" optional=\"0\">\\n  <title>${title.trim()}</title>\\n  ${comment}  ${input}\\n</textarea>\\n<suspend/>`;\r\n\r\n        window.editor.replaceSelection(xmlItems)\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeTextarea clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make number\r\nfunction makeNumber() {\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    let selectedText = getInputOrLine();\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        //  Convert numbering format (e.g., \"1.2\" → \"1_2\")\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        //  Extract label\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        //  Remove blank lines\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        //  Ensure label starts with \"Q\" if it's numeric\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        //  Capture title\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        //  Remove title from input\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        //  Determine comment based on content\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            comment = `<comment>${set.number}</comment>\\n`\r\n        }\r\n\r\n        //  Compose final question output\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<number label=\"${label.trim()}\" size=\"3\" optional=\"0\" verify=\"range(0,99999)\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</number>\\n<suspend/>`\r\n             : `<number label=\"${label.trim()}\" size=\"3\" optional=\"0\" verify=\"range(0,99999)\">\\n  <title>${title.trim()}</title>\\n  ${comment}  ${input}\\n</number>\\n<suspend/>`;\r\n\r\n        window.editor.replaceSelection(xmlItems)\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeNumber clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make slidernumber\r\nfunction makeSlidernumber() {\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    let selectedText = getInputOrLine();\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        //  Convert numbering format (e.g., \"1.2\" → \"1_2\")\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        //  Extract label\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        //  Remove blank lines\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        //  Ensure label starts with \"Q\" if it's numeric\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        //  Capture title\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        //  Remove title from input\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        //  Determine comment based on content\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            comment = `<comment>${set.slidernumber}</comment>\\n`\r\n        }\r\n        let legends = `<res label=\"lLegend\">LeftLegend Text</res>\\n  <res label=\"mLegend\">MidLegend Text</res>\\n  <res label=\"rLegend\">RightLegend Text</res>`\r\n\r\n            //  Compose final radio question output\r\n            let xmlItems = input.includes(\"<comment>\")\r\n             ? `<number label=\"${label.trim()}\"\\n  size=\"3\"\\n  optional=\"0\"\\n  verify=\"range(0,100)\"\\n  slidernumber:handle_active_css=\"background: #8de no-repeat; border-color:#8de;\"\\n  slidernumber:handle_css=\"background: #8de no-repeat; border-color:#8de;\"\\n  slidernumber:handle_offscale_css=\"background: #8de no-repeat; border-color:#8de;\"\\n  slidernumber:leftLegend=\"\\${res['${label.trim()},lLegend']}\"\\n  slidernumber:midLegend=\"\\${res['${label.trim()},mLegend']}\"\\n  slidernumber:rightLegend=\"\\${res['${label.trim()},rLegend']}\"\\n  slidernumber:track_range_css=\"background-color: rgb(107,193,116);\"\\n  uses=\"slidernumber.6\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</number>\\n<suspend/>`\r\n             : `<number label=\"${label.trim()}\"\\n  size=\"3\"\\n  optional=\"0\"\\n  verify=\"range(0,100)\"\\n  slidernumber:handle_active_css=\"background: #8de no-repeat; border-color:#8de;\"\\n  slidernumber:handle_css=\"background: #8de no-repeat; border-color:#8de;\"\\n  slidernumber:handle_offscale_css=\"background: #8de no-repeat; border-color:#8de;\"\\n  slidernumber:leftLegend=\"\\${res['${label.trim()},lLegend']}\"\\n  slidernumber:midLegend=\"\\${res['${label.trim()},mLegend']}\"\\n  slidernumber:rightLegend=\"\\${res['${label.trim()},rLegend']}\"\\n  slidernumber:track_range_css=\"background-color: rgb(107,193,116);\"\\n  uses=\"slidernumber.6\">\\n  <title>${title.trim()}</title>\\n  ${comment}\\n  ${input}\\n  ${legends}\\n</number>\\n<suspend/>`;\r\n\r\n        window.editor.replaceSelection(xmlItems)\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeSlidernumber clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make float\r\nfunction makeFloat() {\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    let selectedText = getInputOrLine();\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        input = selectedText.trim();\r\n\r\n        //  Convert numbering format (e.g., \"1.2\" → \"1_2\")\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        //  Extract label\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        //  Remove blank lines\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        //  Ensure label starts with \"Q\" if it's numeric\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        //  Capture title\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        //  Remove title from input\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        //  Determine comment based on content\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            comment = `<comment>${set.float}</comment>\\n`\r\n        }\r\n\r\n        //  Compose final question output\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<float label=\"${label.trim()}\" size=\"3\" optional=\"0\" range=\"0,99999\">\\n  <title>${title.trim()}</title>\\n  ${input}\\n</float>\\n<suspend/>`\r\n             : `<float label=\"${label.trim()}\" size=\"3\" optional=\"0\" range=\"0,99999\">\\n  <title>${title.trim()}</title>\\n  ${comment}\\n  ${input}\\n</float>\\n<suspend/>`;\r\n\r\n        window.editor.replaceSelection(xmlItems)\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeNumber clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n//make autosum\r\nfunction makeAutosum() {\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    let selectedText = getInputOrLine();\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        let input = selectedText.trim();\r\n\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        let openRows = [];\r\n        let openCols = [];\r\n        let validation = \"\";\r\n\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        if (input.includes('open=\"1\"')) {\r\n            let splitInput = input.split(\"\\n\");\r\n\r\n            splitInput.forEach(inputLine => {\r\n                if (inputLine.includes('open=\"1\"')) {\r\n                    let lineLabel = inputLine.match(/label=\"([^\"]+)\"/)?.[1] || \"\";\r\n                    if (inputLine.includes(\"<row\"))\r\n                        openRows.push(lineLabel);\r\n                    if (inputLine.includes(\"<col\"))\r\n                        openCols.push(lineLabel);\r\n                }\r\n            });\r\n\r\n            input = input.replace(/open=\"1\"/g, 'open=\"1\" openOptional=\"1\"');\r\n\r\n            validation = `  <validate>`;\r\n            if (openRows.length > 0)\r\n                validation += autosum_validate_rows;\r\n            if (openCols.length > 0)\r\n                validation += autosum_validate_cols;\r\n            validation += `  </validate>\\n`;\r\n        }\r\n\r\n        let output = input ? `  ${input}\\n` : \"\";\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            comment = `<comment>${set.number}</comment>\\n`\r\n        }\r\n\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<number label=\"${label.trim()}\" verify=\"range(0,99999)\" size=\"3\" optional=\"1\" uses=\"autosum.5\">\\n  <title>${title.trim()}</title>\\n  ${validation}${output}</number>\\n<suspend/>\\n\\n<exec>\\nif ${label.trim()}.displayed:\\n\\tfor eachRow in ${label.trim()}.rows:\\n\\t\\tfor eachCol in ${label.trim()}.cols:\\n\\t\\t\\tif eachRow.displayed and eachCol.displayed and eachRow[eachCol.index].val in ['', None]:\\n\\t\\t\\t\\teachRow[eachCol.index].val = 0\\n</exec>`\r\n             : `<number label=\"${label.trim()}\" verify=\"range(0,99999)\" size=\"3\" optional=\"1\" uses=\"autosum.5\">\\n  <title>${title.trim()}</title>\\n  ${comment}\\n${validation}${output}</number>\\n<suspend/>\\n\\n<exec>\\nif ${label.trim()}.displayed:\\n\\tfor eachRow in ${label.trim()}.rows:\\n\\t\\tfor eachCol in ${label.trim()}.cols:\\n\\t\\t\\tif eachRow.displayed and eachCol.displayed and eachRow[eachCol.index].val in ['', None]:\\n\\t\\t\\t\\teachRow[eachCol.index].val = 0\\n</exec>`;\r\n\r\n        window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeNumberQuestion clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n//make autosum percent\r\nfunction makeAutosumPercent() {\r\n    let surveyLanguage = localStorage.getItem(\"surveyLanguage\");\r\n    let selectedText = getInputOrLine();\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        let input = selectedText.trim();\r\n\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        let openRows = [];\r\n        let openCols = [];\r\n        let validation = \"\";\r\n\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        if (!isNaN(label[0])) {\r\n            label = \"Q\" + label;\r\n        }\r\n\r\n        let title = \"\";\r\n        if (input.includes(\"@\")) {\r\n            title = input.substring(0, input.indexOf(\"@\"));\r\n        } else {\r\n            let markers = [\"<row\", \"<col\", \"<choice\", \"<comment\", \"<group\", \"<net\", \"<exec\"];\r\n            let indices = markers.map(marker => input.indexOf(marker)).filter(index => index !== -1);\r\n            let inputIndex = indices.length ? Math.min(...indices) : input.length;\r\n            title = input.substring(0, inputIndex);\r\n        }\r\n\r\n        input = input.replace(title, \"\").trim();\r\n\r\n        if (input.includes('open=\"1\"')) {\r\n            let splitInput = input.split(\"\\n\");\r\n\r\n            splitInput.forEach(inputLine => {\r\n                if (inputLine.includes('open=\"1\"')) {\r\n                    let lineLabel = inputLine.match(/label=\"([^\"]+)\"/)?.[1] || \"\";\r\n                    if (inputLine.includes(\"<row\"))\r\n                        openRows.push(lineLabel);\r\n                    if (inputLine.includes(\"<col\"))\r\n                        openCols.push(lineLabel);\r\n                }\r\n            });\r\n\r\n            input = input.replace(/open=\"1\"/g, 'open=\"1\" openOptional=\"1\"');\r\n\r\n            validation = `  <validate>`;\r\n            if (openRows.length > 0)\r\n                validation += autosum_validate_rows;\r\n            if (openCols.length > 0)\r\n                validation += autosum_validate_cols;\r\n            validation += `  </validate>\\n`;\r\n        }\r\n\r\n        let output = input ? `  ${input}\\n` : \"\";\r\n        let comment = \"\";\r\n        if (!input.includes(\"<comment>\")) {\r\n            const set = comments[surveyLanguage] || comments.english;\r\n            comment = `<comment>${set.autosumPercent}</comment>\\n`\r\n        }\r\n\r\n        let xmlItems = input.includes(\"<comment>\")\r\n             ? `<number label=\"${label.trim()}\" verify=\"range(0,100)\" size=\"3\" optional=\"1\" uses=\"autosum.5\" amount=\"100\" autosum:postText=\"%\">\\n  <title>${title.trim()}</title>\\n  ${validation}${output}</number>\\n<suspend/>\\n\\n<exec>\\nif ${label.trim()}.displayed:\\n\\tfor eachRow in ${label.trim()}.rows:\\n\\t\\tfor eachCol in ${label.trim()}.cols:\\n\\t\\t\\tif eachRow.displayed and eachCol.displayed and eachRow[eachCol.index].val in ['', None]:\\n\\t\\t\\t\\teachRow[eachCol.index].val = 0\\n</exec>`\r\n             : `<number label=\"${label.trim()}\" verify=\"range(0,100)\" size=\"3\" optional=\"1\" uses=\"autosum.5\" amount=\"100\" autosum:postText=\"%\">\\n  <title>${title.trim()}</title>\\n  ${comment}${validation}${output}</number>\\n<suspend/>\\n\\n<exec>\\nif ${label.trim()}.displayed:\\n\\tfor eachRow in ${label.trim()}.rows:\\n\\t\\tfor eachCol in ${label.trim()}.cols:\\n\\t\\t\\tif eachRow.displayed and eachCol.displayed and eachRow[eachCol.index].val in ['', None]:\\n\\t\\t\\t\\teachRow[eachCol.index].val = 0\\n</exec>`;\r\n\r\n        window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeNumberQuestion clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make comment (<html>)\r\nfunction makeSurveyComment() {\r\n    let selectedText = getInputOrLine();\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        let input = selectedText.trim();\r\n\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        let labelMatch = input.match(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/);\r\n        let label = labelMatch ? labelMatch[1] : \"Unknown\";\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        let xmlItems = `<html label=\"${label.trim()}\" where=\"survey\">${input}</html>`;\r\n\r\n        window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeSurveyComment clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n//make pipe\r\nfunction makePipe() {\r\n    const selectedText = getInputOrLine();\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        let input = selectedText.trim();\r\n\r\n        // Remove blank lines\r\n        input = input.replace(/\\n\\n+/g, \"\\n\");\r\n\r\n        // Check if there is at least one <case>\r\n        if (!input.includes(\"<case\")) {\r\n            alert(\"<pipe> tag requires at least one <case> element.\");\r\n            return;\r\n        }\r\n        const output = `<pipe label=\"\" capture=\"\">\\n  ${input}\\n</pipe>\\n`;\r\n        window.editor.replaceSelection(output);\r\n        return output;\r\n\r\n    } catch (error) {\r\n        console.error(\"makePipe clip failed:\", error);\r\n        alert(\"An error occurred while generating the <pipe> tag.\");\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// make comment (<html>)\r\nfunction makeNote() {\r\n    let selectedText = getInputOrLine();\r\n\r\n    if (!selectedText.trim()) {\r\n        alert(\"No text selected!\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        let input = selectedText.trim();\r\n\r\n        input = input.replace(/^(\\w?\\d+)\\.(\\d+)/, \"$1_$2\");\r\n\r\n        input = input.replace(/^([a-zA-Z0-9-_]+)(\\.|:|\\)|\\s)/, \"\");\r\n\r\n        let xmlItems = `<note>\\n${input}\\n</note>\\n`;\r\n\r\n        window.editor.replaceSelection(xmlItems);\r\n        return xmlItems;\r\n\r\n    } catch (error) {\r\n        console.error(\"makeNote clip failed:\", error);\r\n        return \"\";\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"survey3.a75bf502.js.map","sourceRoot":"/__parcel_source_root/"}