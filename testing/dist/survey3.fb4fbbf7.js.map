{"mappings":"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","sources":["scripts/styles.js"],"sourcesContent":["// STYLES FUNCTIONS\r\nfunction groupStylesByPrefix(definitions) {\r\n    const groups = {};\r\n\r\n    definitions.forEach(({\r\n            label\r\n        }) => {\r\n        const [prefix] = label.split(\".\");\r\n        if (!groups[prefix])\r\n            groups[prefix] = [];\r\n        groups[prefix].push(label);\r\n    });\r\n\r\n    // Sort groups alphabetically, then each groupâ€™s labels\r\n    Object.keys(groups).forEach(prefix => {\r\n        groups[prefix].sort((a, b) => a.localeCompare(b));\r\n    });\r\n\r\n    return Object.fromEntries(Object.entries(groups).sort(([a], [b]) => a.localeCompare(b)));\r\n}\r\nfunction getSurveyStyles() {\r\n    mode = ` mode=\"${document.getElementById(\"styleDropdownMode\").value}\"` || \"\";\r\n    return SURVEY_STYLE_DEFINITIONS.map(({\r\n            label,\r\n            body\r\n        }) => ({\r\n            label,\r\n            value: `<style name=\"${label}\"${mode}><![CDATA[\\n${body}\\n]]></style>`\r\n        }));\r\n}\r\n\r\n// styles elements and attributes\r\nfunction addNewStyleBlank() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `<style name=\"\"> <![CDATA[\r\n\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\nfunction addNewStyleBlankwithLabel() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `<style name=\"\" label=\"\"> <![CDATA[\r\n\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\nfunction addStyleCopy() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `<style copy=\"\"/>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\nfunction addSurveyWideCSS() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `<style mode=\"after\" name=\"respview.client.css\"><![CDATA[\r\n<style type=\"text/css\">\r\n${selectedText}\r\n</style>\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\nfunction addSurveyWideJS() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `<style mode=\"after\" name=\"respview.client.js\"> <![CDATA[\r\n<script>\r\n${selectedText}\r\n</script>\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\nfunction addQuestionSpecificCSS() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `<style name=\"page.head\"><![CDATA[\r\n<style type=\"text/css\">\r\n#question_$(this.label) {\r\n\r\n}\r\n</style>\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\nfunction addQuestionSpecificJSAfterQ() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `<style name=\"question.footer\" mode=\"after\" wrap=\"ready\" ><![CDATA[\r\nlet $q = $ (\"#question_$(this.label)\");\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\nfunction addQuestionSpecificJSInHead() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `<style name=\"page.head\" wrap=\"ready\" ><![CDATA[\r\nlet $q = $ (\"#question_$(this.label)\");\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\n// pretest labels display\r\nfunction addPretestLabelsDisplay(){\r\n    const xmlContent = `<style cond=\"list=='0'\" arg:html_lbls=\"0\" arg:qn_lbls=\"1\" mode=\"after\" name=\"respview.client.js\"><![CDATA[\r\n<script>\r\n$ (document).ready(function(){\r\n\t//Show question labels\r\n\tif('$(qn_lbls)' == 1){\r\n\t\t$ ('form#primary').find('div[id^=\"question_\"]').each(function(){\r\n\t\t\t$ (this).find('.question-text').prepend($ (this).attr('id').replace('question_','') + '. ');\r\n\t\t})\r\n\t}\r\n\t\r\n\t//Show <html> labels\r\n\tif('$(html_lbls)' == 1){\r\n\t\t$ ('form#primary').find('div[id^=\"comment_\"]').each(function(){\r\n\t\t\t$ (this).find('.comment-text').prepend($ (this).attr('id').replace('comment_','') + '. ');\r\n\t\t})\r\n\t}\r\n});\r\n</script>\r\n]]></style>\r\n`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\nfunction addLeftBlankLegend() {\r\n    const selectedText = getInputOrLine();\r\n    const xmlContent = `  <res label=\"leftLegend\">${selectedText}</res>\r\n  <style name=\"question.left-blank-legend\"><![CDATA[\r\n<$(tag) class=\"pseudo-col-legend nonempty cell\">\\${res[\"%s,leftLegend\" % this.label]}</$(tag)>\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\n\r\nfunction addMaxDiff() {\r\n    const xmlContent = `\r\n<style name=\"question.top-legend\"> <![CDATA[\r\n\\\\@if ec.simpleList\r\n    $(legends)\r\n\\\\@else\r\n\\\\@if this.styles.ss.colLegendHeight\r\n    <\\$(tag) class=\"row row-col-legends row-col-legends-top \\${\"mobile-top-row-legend \" if mobileOnly else \"\"}\\${\"GtTenColumns \" if ec.colCount > 10 else \"\"}colCount-\\$(colCount)\" style=\"height:\\${this.styles.ss.colLegendHeight};\">\r\n\\\\@else\r\n    <\\$(tag) class=\"row row-col-legends row-col-legends-top \\${\"mobile-top-row-legend \" if mobileOnly else \"\"}\\${\"GtTenColumns \" if ec.colCount > 10 else \"\"}colCount-\\$(colCount)\">\r\n\\\\@endif\r\n    \\${legends.split(\"</th>\")[0]}</th>\r\n    \\$(left)\r\n    \\${legends.split(\"</th>\")[1]}</th>\r\n</\\$(tag)>\r\n\\\\@if not simple\r\n</tbody>\r\n<tbody>\r\n\\\\@endif\r\n\\\\@endif\r\n]]></style>\r\n<style name=\"question.row\"> <![CDATA[\r\n\\\\@if ec.simpleList\r\n\\$(elements)\r\n\\\\@else\r\n\\\\@if this.styles.ss.rowHeight\r\n    <\\$(tag) class=\"row row-elements \\$(style) colCount-\\$(colCount)\" style=\"height:\\${this.styles.ss.rowHeight};\">\r\n\\\\@else\r\n    <\\$(tag) class=\"row row-elements \\$(style) colCount-\\$(colCount)\">\r\n\\\\@endif\r\n\\${elements.split(\"</td>\")[0]}</td>\r\n\\$(left)\r\n\\${elements.split(\"</td>\")[1]}</td>\r\n</\\$(tag)>\r\n\\\\@endif\r\n]]></style>\r\n\r\n`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\n\r\nfunction addColFixDeclaration(){\r\n    const xmlContent = `<style label=\"colFix\" name=\"question.element\"> <![CDATA[\r\n\\@if ec.simpleList\r\n<div class=\"element \\$(rowStyle) \\$(levels) \\$(extraClasses) \\${col.group.styles.ss.groupClassNames if col.group else (row.group.styles.ss.groupClassNames if row.group else \"\")} \\$(col.styles.ss.colClassNames) \\$(row.styles.ss.rowClassNames) \\${\"clickableCell\" if isClickable else \"\"} row-\\${ec.row.label if ec.row.label else \"1\"} col-\\${ec.col.label if ec.col.label else \"1\"}\" data-row=\"\\${ec.row.label if ec.row.label else \"1\"}\" data-col=\"\\${ec.col.label if ec.col.label else \"1\"}\"\\$(extra)>\r\n    \\${v2_insertStyle('el.label.start')}\r\n    \\$(text)\r\n    \\${v2_insertStyle('el.label.end')}\r\n</div>\r\n\\@else\r\n<\\$(tag) \\$(headers) class=\"cell nonempty element \\$(levels) \\${\"desktop\" if this.grouping.cols else \"mobile\"} border-collapse \\$(extraClasses) \\${col.group.styles.ss.groupClassNames if col.group else (row.group.styles.ss.groupClassNames if row.group else \"\")} \\$(col.styles.ss.colClassNames) \\$(row.styles.ss.rowClassNames) \\${\"clickableCell\" if isClickable else \"\"} row-\\${ec.row.label if ec.row.label else \"1\"} col-\\${ec.col.label if ec.col.label else \"1\"}\" data-row=\"\\${ec.row.label if ec.row.label else \"1\"}\" data-col=\"\\${ec.col.label if ec.col.label else \"1\"}\"\\$(extra)>\r\n    \\${v2_insertStyle('el.label.start')}\r\n    \\$(text)\r\n    \\${v2_insertStyle('el.label.end')}\r\n</\\$(tag)>\r\n\\@endif\r\n]]></style>\r\n<style label=\"colFix\" name=\"el.select.element\"> <![CDATA[\r\n<option value=\"\\$(value)\" \\$(selected) class=\"\\${choice.styles.ss.choiceClassNames if ec.choice else \"\"} ch-\\${choice.label if choice.label else \"1\"}\" data-choice=\"\\${choice.label if choice.label else \"1\"}\">\\$(text)</option>\r\n]]></style>`;\r\n    window.editor.replaceSelection(xmlContent);\r\n\r\n}\r\n\r\nfunction addColFixCall() {\r\n    const xmlContent = `<style copy=\"colFix\" />`;\r\n    window.editor.replaceSelection(xmlContent);\r\n}\r\n\r\n"],"names":[],"version":3,"file":"survey3.fb4fbbf7.js.map","sourceRoot":"/__parcel_source_root/"}